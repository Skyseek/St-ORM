<?php
echo "<?php";
?>

/** 
 * DON'T EDIT THIS FILE!
 * 
 * This file was automatically generated by the Skyseek's StORM System..
 * The real source code you should be looking at is in one or more
 * grammar files in the Lime format.
 * 
 * THE ONLY REASON TO LOOK AT THIS FILE is to see where in the config
 * file that your error happened, because there are enough comments to
 * help you debug your configuration.
 * 
 * If you ignore this warning, you're shooting yourself in the brain,
 * not the foot.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 */

<?php if($this->namespace !== null): ?>
namespace <?php echo $this->namespace; ?>;
<?php endif; ?>

require_once 'lib/Entity.php';

/**
 * <?php echo $this->name; ?> Base Entity
 *
 * @author     Skyseek's StORM
 */
abstract class <?php echo $this->name; ?>Base extends Entity 
{
	// ====================================================================
	//
	// 	Public Properties
	//
	// ====================================================================

<?php foreach($this->properties as $property): ?>
<?php if($property->isSimpleType()): ?>
	public $<?php echo $property->name; ?>;
<?php endif; ?>
<?php endforeach; ?>


	// ====================================================================
	//
	// 	Mapped Properties
	//
	// ====================================================================

<?php foreach($this->properties as $property): ?>
<?php if($property->isMappedEntity()): $mappedEntity = $property->getMappedEntity(); ?>
	// ----------------------------------
	// 	<?php echo $mappedEntity->name; ?> 
	// ----------------------------------

	
	protected $_<?php echo $property->name; ?>;
	
	/**
	 * @param <?php echo $mappedEntity->name; ?> $<?php echo $property->name; ?> 
	 */
	public function set<?php echo ucwords($property->name); ?>(<?php echo $mappedEntity->name; ?> $<?php echo $property->name; ?>) 
	{
		$this->_<?php echo $property->name; ?> = $<?php echo $property->name; ?>;
	}

	/**
	 * @return <?php echo $mappedEntity->name; ?> 
	 */
	public function get<?php echo ucwords($property->name); ?>() 
	{
		if ($this->_<?php echo $property->name; ?> == null && $this->referenceId('<?php echo $property->key; ?>'))  {
			$this->_<?php echo $property->name; ?> = $this-><?php echo $mappedEntity->getMapperVariableName(); ?>()->get<?php echo ucwords($property->name); ?>($this->referenceId('<?php echo $property->key; ?>'));
		}

		return $this->_<?php echo $property->name; ?>;
	}

<?php endif; ?>
<?php endforeach; ?>




	// ====================================================================
	//
	// 	Entity Mappers
	//
	// ====================================================================

<?php foreach($this->properties as $property): ?>
<?php if($property->isMappedEntity()): $mappedEntity = $property->getMappedEntity(); ?>

	// ----------------------------------
	// 	<?php echo $mappedEntity->name; ?> Mapper
	// ----------------------------------
	
	
	protected $_<?php echo $mappedEntity->getMapperVariableName(); ?>;
	
	/**
	 * @param <?php echo $mappedEntity->getMapperClassName(); ?> $<?php echo $mappedEntity->getMapperVariableName(); ?> 
	 * @return <?php echo $mappedEntity->getMapperClassName(); ?> 
	 */
	public function <?php echo $mappedEntity->getMapperVariableName(); ?>(<?php echo $mappedEntity->getMapperClassName(); ?> $<?php echo $mappedEntity->getMapperVariableName(); ?>=null) 
	{
		if($<?php echo $mappedEntity->getMapperVariableName(); ?>) {
			$this->_<?php echo $mappedEntity->getMapperVariableName(); ?> = $<?php echo $mappedEntity->getMapperVariableName(); ?>;
		}

		if($this->_<?php echo $mappedEntity->getMapperVariableName(); ?> === null) {
			$this->_<?php echo $mappedEntity->getMapperVariableName(); ?> = <?php echo $mappedEntity->getMapperClassName(); ?>::getInstance();
		}

		return $this->_<?php echo $mappedEntity->getMapperVariableName(); ?>;
	}

<?php endif; ?>
<?php endforeach; ?>
}